// подробное описание см. в Уч.пос.S17-72 Душутина Е.В."СПО Межпроц.взаимод.в ОС"стр.40-44
// полный квант описания примероа по этой теме со стр.32.

ТЗ:  Есть один процесс, выполняющий запись в разделяемую память и один процесс, 
выполняющий чтение из нее (извлечение данных из памяти). 
Программа должна обеспечить невозможность повторного чтения одних и тех же данных и 
невозможность перезаписи данных, т.е. новой записи, до тех пор, пока читатель не прочитает предыдущую.
Далее нужно, чтобы происходила корректная работа нескольких читателей и нескольких писателей одновременно.
При этом есть некий буфер не единичного размера, тип которого не имеет значения.
Решение
В программе создается 3 семафора:
1) отвечающий за доступ к памяти
2) счетный для количества заполненных ячеек (заполняется нулём)
3) счетный для количества свободных (пустых) ячеек (заполняется BUF_SIZE)

  Процессы-читатели перед своей работой захватывают семафор «количество  заполненных  ячеек»,  
т.е.  ждут появления хотя бы одной порции данных, а после чтения освобождают семафор «количество пустых ячеек».  
  Процессы- писатели перед записью захватывают семафор «количество пустых ячеек», 
т.е. ждут появления хотя бы одной пустой ячейки для записи, а после записи освобождают семафор «количество полных ячеек». 
Таким образом, решается проблема чтения из пустого буфера и запись в полный. 
Семафор, отвечающий за доступ к памяти нужен, чтобы не происходило взаимной блокировки процессов (deadlock).
  Каждый из пишущих процессов записывает по 10 чисел в массив, 
в то время как процесс-читатель считывает первые 15 чисел из записанных. 

Проверьте, что синхронизация работает должным образом: 
нет выхода за пределы массива, записанные данные не затираются до их прочтения, и обмен данными происходит без потерь.